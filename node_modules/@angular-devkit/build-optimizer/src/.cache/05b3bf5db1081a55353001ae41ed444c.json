{"remainingRequest":"C:\\hotrestoUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\hotrestoUI\\node_modules\\rxjs-compat\\_esm5\\operator\\windowTime.js","dependencies":[{"path":"C:\\hotrestoUI\\node_modules\\rxjs-compat\\_esm5\\operator\\windowTime.js","mtime":1566536543021},{"path":"C:\\hotrestoUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1566536460015},{"path":"C:\\hotrestoUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1566536399225}],"contextDependencies":[],"result":["import { asyncScheduler } from 'rxjs';\r\nimport { isNumeric, isScheduler } from 'rxjs/internal-compatibility';\r\nimport { windowTime as higherOrder } from 'rxjs/operators';\r\nexport function windowTime(windowTimeSpan) {\r\n    var scheduler = asyncScheduler;\r\n    var windowCreationInterval = null;\r\n    var maxWindowSize = Number.POSITIVE_INFINITY;\r\n    if (isScheduler(arguments[3])) {\r\n        scheduler = arguments[3];\r\n    }\r\n    if (isScheduler(arguments[2])) {\r\n        scheduler = arguments[2];\r\n    }\r\n    else if (isNumeric(arguments[2])) {\r\n        maxWindowSize = arguments[2];\r\n    }\r\n    if (isScheduler(arguments[1])) {\r\n        scheduler = arguments[1];\r\n    }\r\n    else if (isNumeric(arguments[1])) {\r\n        windowCreationInterval = arguments[1];\r\n    }\r\n    return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\r\n}\r\n//# sourceMappingURL=windowTime.js.map",null]}